#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.0.3
#  in conjunction with Tcl version 8.6
#    Apr 23, 2020 11:06:37 AM +0530  platform: Windows NT

import sys
import time
import os
import pathlib
from confluent_kafka import Producer , Consumer
from confluent_kafka.admin import AdminClient, NewTopic
import json , csv
import subprocess
import re
import datetime
from Feature_extractor import system
import producer

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import Fuse_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    Fuse_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    Fuse_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    
    def display_info(self):
        if(self.Listbox1.size() != 0):
            self.Listbox1.delete(0,self.Listbox1.size() - 1)
            self.Listbox1.update()
        self.Listbox1.insert(self.Listbox1.size(),"Processing Logs...")
        self.Listbox1.update()
        system.feature_extractor()
        self.Listbox1.insert(self.Listbox1.size(),"Processing Files...")
        self.Listbox1.update()
        count = producer.produce()
        self.Listbox1.insert(self.Listbox1.size(),"Displaying Results...")
        self.Listbox1.update()
        c = Consumer({'bootstrap.servers': 'localhost:9092','group.id': 'mygroup2','enable.auto.commit':'false','auto.offset.reset': 'earliest' })
        c.subscribe(['response'])
        type = {10 : "Malware",11 : "Benign" ,1 : "Could not process file"}
        count1=0
        while count1<count:
           	msg = c.poll(1.0)
           	c.commit()
           	if msg is None:
           	    continue
           	if msg.error():
           	    print("Consumer error : {}".format(msg.error()))
           	    continue
           	msg = json.loads(msg.value().decode('utf-8'))
           	try:
           	    if(msg['type']=='exit'):
           	        continue
           	except:
           	    print("Recieved response")
           	out = 'File : '+msg['Name']+' Prediction : '+type[msg['Class']]
           	self.Listbox1.insert(self.Listbox1.size(),out)
           	self.Listbox1.update()
           	count1 += 1
           	
        c.close()
    
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("722x545+376+112")
        top.minsize(116, 1)
        top.maxsize(1370, 750)
        top.resizable(1, 1)
        top.title("New Toplevel")
        top.configure(background="#00354f")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="#ffffff")

        self.TLabel = ttk.Label(top)
        self.TLabel.place(relx=0.41, rely=0.028, height=63, width=178)
        self.TLabel.configure(background="#000000")
        self.TLabel.configure(foreground="#00ff00")
        self.TLabel.configure(font="-family {Century} -size 24")
        self.TLabel.configure(relief="flat")
        self.TLabel.configure(anchor='center')
        self.TLabel.configure(justify='left')
        self.TLabel.configure(text='''WATCHFs''')

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.ScanButton = tk.Button(top)
        self.ScanButton.place(relx=0.395, rely=0.921, height=34, width=100)
        self.ScanButton.configure(activebackground="#000000")
        self.ScanButton.configure(activeforeground="white")
        self.ScanButton.configure(activeforeground="#00ff00")
        self.ScanButton.configure(background="#000000")
        self.ScanButton.configure(disabledforeground="#a3a3a3")
        self.ScanButton.configure(font="-family {Franklin Gothic Demi} -size 18")
        self.ScanButton.configure(foreground="#00ff00")
        self.ScanButton.configure(highlightbackground="#d9d9d9")
        self.ScanButton.configure(highlightcolor="black")
        self.ScanButton.configure(pady="0")
        self.ScanButton.configure(text='''SCAN''')
        self.ScanButton.configure(command=self.display_info)

        self.TLabel1 = ttk.Label(top)
        self.TLabel1.place(relx=0.753, rely=0.85, height=35, width=130)
        self.TLabel1.configure(background="#000000")
        self.TLabel1.configure(foreground="#00ff00")
        self.TLabel1.configure(font="-family {Franklin Gothic Medium Cond} -size 18")
        self.TLabel1.configure(relief="flat")
        self.TLabel1.configure(anchor='w')
        self.TLabel1.configure(justify='left')
        self.TLabel1.configure(text='''Last Scan:''')

        self.ScanTime = tk.Message(top)
        self.ScanTime.place(relx=0.751, rely=0.932, relheight=0.07
                , relwidth=0.199)
        self.ScanTime.configure(background="#000000")
        self.ScanTime.configure(foreground="#00ff00")
        self.ScanTime.configure(highlightbackground="#d9d9d9")
        self.ScanTime.configure(highlightcolor="black")
        self.ScanTime.configure(text=ls)
        self.ScanTime.configure(width=120)

        self.ExitButton = tk.Button(top)
        self.ExitButton.place(relx=0.981, rely=0.0, height=24, width=31)
        self.ExitButton.configure(activebackground="#ececec")
        self.ExitButton.configure(activeforeground="#000000")
        self.ExitButton.configure(background="#000000")
        self.ExitButton.configure(disabledforeground="#a3a3a3")
        self.ExitButton.configure(foreground="#00ff00")
        self.ExitButton.configure(highlightbackground="#d9d9d9")
        self.ExitButton.configure(highlightcolor="black")
        self.ExitButton.configure(pady="0")
        self.ExitButton.configure(text='''x''')
        self.ExitButton.bind('<Button-1>',lambda e:Fuse_support.ExitButton_LeftClick(e))

        self.Listbox1 = tk.Listbox(top)
        self.Listbox1.place(relx=0.069, rely=0.165, relheight=0.701
                , relwidth=0.67)
        self.Listbox1.configure(background="#000000")
        self.Listbox1.configure(disabledforeground="#a3a3a3")
        self.Listbox1.configure(font="TkFixedFont")
        self.Listbox1.configure(foreground="#00ff00")

if __name__ == '__main__':
    f = open("/home/sumant/WATCHFs/files/time.txt")
    ls = f.read()
    vp_start_gui()





